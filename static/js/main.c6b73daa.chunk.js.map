{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js"],"names":["App","useState","text","setText","todos","setTodos","filter","setFilter","handleOnSubmit","newTodo","value","id","Date","getTime","checked","removed","important","filteredTodos","todo","today","className","getFullYear","getMonth","getDate","defaultValue","onChange","e","target","onClick","newTodos","disabled","length","onSubmit","preventDefault","type","handleOnChange","map","JSON","parse","stringify","handleOnCheck","handleOnEdit","handleOnRemove","handleOnImportant","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6b73daa.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\n//Todo's type\r\ntype Todo = {\r\n  value: string;\r\n  readonly id: number;\r\n  checked: boolean;\r\n  removed: boolean;\r\n  important: boolean;\r\n};\r\ntype Filter = \"all\" | \"checked\" | \"unchecked\" | \"removed\" | \"important\";\r\n\r\nexport const App = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const [todos, setTodos] = useState<Todo[]>([]);\r\n  const [filter, setFilter] = useState<Filter>(\"all\");\r\n  const handleOnSubmit = () => {\r\n    if (!text) return;\r\n    const newTodo: Todo = {\r\n      value: text,\r\n      id: new Date().getTime(),\r\n      checked: false,\r\n      removed: false,\r\n      important: false,\r\n    };\r\n\r\n    setTodos([newTodo, ...todos]);\r\n    setText(\"\");\r\n  };\r\n  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setText(e.target.value);\r\n  };\r\n  const handleOnEdit = (id: number, value: string) => {\r\n    const deepCopy: Todo[] = JSON.parse(JSON.stringify(todos));\r\n\r\n    const newTodos = deepCopy.map((todo) => {\r\n      if (todo.id === id) {\r\n        todo.value = value;\r\n      }\r\n      return todo;\r\n    });\r\n    // console.log(\"=== Original todos ===\");\r\n    // todos.map((todo) => console.log(`id: ${todo.id}, value: ${todo.value}`));\r\n    setTodos(newTodos);\r\n  };\r\n  const handleOnCheck = (id: number, checked: boolean) => {\r\n    const deepCopy: Todo[] = JSON.parse(JSON.stringify(todos));\r\n    const newTodos = deepCopy.map((todo) => {\r\n      if (todo.id === id) {\r\n        todo.checked = !checked;\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(newTodos);\r\n  };\r\n  const handleOnRemove = (id: number, removed: boolean) => {\r\n    const deepCopy: Todo[] = JSON.parse(JSON.stringify(todos));\r\n\r\n    const newTodos = deepCopy.map((todo) => {\r\n      if (todo.id === id) {\r\n        todo.removed = !removed;\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(newTodos);\r\n  };\r\n  const handleOnEmpty = () => {\r\n    const newTodos = todos.filter((todo) => !todo.removed);\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const filteredTodos = todos.filter((todo) => {\r\n    switch (filter) {\r\n      case \"all\":\r\n        return !todo.removed;\r\n      case \"checked\":\r\n        return todo.checked && !todo.removed;\r\n      case \"unchecked\":\r\n        return !todo.checked && !todo.removed;\r\n      case \"important\":\r\n        return todo.important && !todo.removed;\r\n      case \"removed\":\r\n        return todo.removed;\r\n      default:\r\n        return todo;\r\n    }\r\n  });\r\n\r\n  const handleOnImportant = (id: number, important: boolean) => {\r\n    const deepCopy: Todo[] = JSON.parse(JSON.stringify(todos));\r\n\r\n    const newTodos = deepCopy.map((todo) => {\r\n      if (todo.id === id) {\r\n        todo.important = !important;\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const today = new Date();\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"header\">\r\n        <h1>\r\n          {today.getFullYear() +\r\n            \"/\" +\r\n            (today.getMonth() + 1) +\r\n            \"/\" +\r\n            today.getDate() +\r\n            \"/\"}\r\n        </h1>\r\n      </div>\r\n      <div className=\"main\">\r\n        {/* filter */}\r\n        {/* // e.target.value: string を Filter 型にキャストします */}\r\n        <select\r\n          defaultValue=\"all\"\r\n          onChange={(e) => setFilter(e.target.value as Filter)}\r\n        >\r\n          <option value=\"all\">すべて</option>\r\n          <option value=\"checked\">完了</option>\r\n          <option value=\"unchecked\">未完了</option>\r\n          <option value=\"important\">重要</option>\r\n          <option value=\"removed\">ごみ箱</option>\r\n        </select>\r\n        {filter === \"removed\" ? (\r\n          <button\r\n            onClick={handleOnEmpty}\r\n            disabled={todos.filter((todo) => todo.removed).length === 0}\r\n          >\r\n            ごみ箱を空にする\r\n          </button>\r\n        ) : (\r\n          <form\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n              handleOnSubmit();\r\n            }}\r\n          >\r\n            <input\r\n              type=\"text\"\r\n              className=\"input-area\"\r\n              value={text}\r\n              disabled={filter === \"checked\"}\r\n              onChange={(e) => handleOnChange(e)}\r\n            />\r\n            <input\r\n              type=\"submit\"\r\n              value=\"追加\"\r\n              disabled={filter === \"checked\"}\r\n              onSubmit={handleOnSubmit}\r\n            />\r\n          </form>\r\n        )}\r\n        <ul>\r\n          {filteredTodos.map((todo) => {\r\n            return (\r\n              <li key={todo.id}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  disabled={todo.removed}\r\n                  checked={todo.checked}\r\n                  onChange={(e) => handleOnCheck(todo.id, todo.checked)}\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  disabled={todo.checked || todo.removed}\r\n                  value={todo.value}\r\n                  onChange={(e) => handleOnEdit(todo.id, e.target.value)}\r\n                />\r\n                <button\r\n                  className=\"removeBtn\"\r\n                  onClick={() => handleOnRemove(todo.id, todo.removed)}\r\n                >\r\n                  {todo.removed ? \"復元\" : \"削除\"}\r\n                </button>\r\n                <button\r\n                  className={todo.important ? \"importantBtn\" : \"inactive\"}\r\n                  onClick={() => handleOnImportant(todo.id, todo.important)}\r\n                >\r\n                  重要\r\n                </button>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}